name: Create Release on Tag Push

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - name: Checkout
        uses: actions/checkout@v3

      # Install Node.js
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: "https://registry.npmjs.org"

        # Install pnpm
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        id: pnpm-install
        with:
          version: 8
          run_install: false

      # Get pnpm store directory
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      # Setup pnpm cache
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: build
        run: pnpm build

      - name: Deploy to another repository
        env:
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
        run: |
          git config --global user.email "admin@shenzilong.cn"
          git config --global user.name "崮生"
          git clone --quiet --branch=main https://x-access-token:${DEPLOY_KEY}@github.com/2234839/vite-plugin-siyuan.git main
          cd main
          rm -rf ./* && cp -R ../dist/vite-plugin-siyuan/. .
          ls
          echo "CURRENT_VERSION=$(cat plugin.json | jq -r '.version')" | tee -a $GITHUB_ENV
          TAG=$(git describe --tags `git rev-list --tags --max-count=1` | sed 's/^v//')
          echo "LATEST_TAG=$TAG" | tee -a $GITHUB_ENV
          if [ "$CURRENT_VERSION" != "$LATEST_TAG" ] && [[ "$CURRENT_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "CURRENT_VERSION_IS_NEWER=true" | tee -a $GITHUB_ENV
          else
            echo "CURRENT_VERSION_IS_NEWER=false" | tee -a $GITHUB_ENV
          fi
          echo "333333"
          echo "$CURRENT_VERSION   $TAG"
          cat $GITHUB_ENV
          git tag -a "v$CURRENT_VERSION" -m "Release version $CURRENT_VERSION"
          git push --tags
          git commit -m "Update dist to GitHub Pages"
          git push -f origin main
          cd .. && rm -r main

      # - name: Release
      #   uses: ncipollo/release-action@v1
      #   with:
      #     allowUpdates: true
      #     artifactErrorsFailBuild: true
      #     artifacts: "package.zip"
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     # prerelease: true
